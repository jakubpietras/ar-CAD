#version 460 core

struct ArVec3
{
	vec3 Position;
};

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(r32f, binding = 0) uniform image2D u_ImgOutput;
layout(std430, binding = 1) buffer b_SSBO {
    ArVec3 positions[];
};

uniform uint u_PathSegments;
uniform float u_CutterRadius;
uniform bool u_IsCutterFlat;
uniform float u_TexelWidth;
uniform float u_TexelHeight;
uniform float u_OffsetX;
uniform float u_OffsetY;

float CalculateDescend(vec3 p, vec3 start, vec3 end)
{
    return 0.0f;
}

void main()
{
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    float currentHeight = imageLoad(u_ImgOutput, texelCoord).r;

    vec3 p = vec3(
    u_OffsetX + texelCoord.x * u_TexelWidth,
    currentHeight,
    u_OffsetY + texelCoord.y * u_TexelHeight
    );

    imageStore(u_ImgOutput, texelCoord, vec4(0.0, 0.0, 0.0, 0.0));

//	vec3 corners[4] = vec3[](
//    p,
//    vec3(p.x + u_TexelWidth, currentHeight.x, p.z),
//    vec3(p.x, currentHeight.x, p.z - u_TexelHeight),
//    vec3(p.x + u_TexelWidth, currentHeight.x, p.z - u_TexelHeight)
//    );
}

